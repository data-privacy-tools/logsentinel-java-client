/*
 * LogSentinel RESTful API
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.api;

import com.logsentinel.ApiException;
import com.logsentinel.model.AuditLogEntry;
import com.logsentinel.model.BatchLogRequestEntry;
import com.logsentinel.model.LogResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LoggingApi
 */
@Ignore
public class LoggingApiTest {

    private final LoggingApi api = new LoggingApi();

    
    /**
     * Get entry by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEntryByIdTest() throws ApiException {
        String applicationId = null;
        String entryId = null;
        AuditLogEntry response = api.getEntryById(applicationId, entryId);

        // TODO: test validations
    }
    
    /**
     * getHashByEntryId
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getHashByEntryIdTest() throws ApiException {
        String applicationId = null;
        String entryId = null;
        LogResponse response = api.getHashByEntryId(applicationId, entryId);

        // TODO: test validations
    }
    
    /**
     * Log an event by a given actor
     *
     * Log an event by specifying actor and action, as well as the request body. There are no limitations to the structure of the request body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logTest() throws ApiException {
        String applicationId = null;
        String action = null;
        String actorId = null;
        String auditLogEntryType = null;
        String signature = null;
        String actorDepartment = null;
        String actorDisplayName = null;
        List<String> actorRoles = null;
        Boolean binaryContent = null;
        byte[] details = null;
        List<String> directExternalPush = null;
        List<String> encryptedKeywords = null;
        String gdprCorrelationKey = null;
        String logLevel = null;
        String process = null;
        LogResponse response = api.log(applicationId, action, actorId, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, process);

        // TODO: test validations
    }
    
    /**
     * Log an authentication event with the option to pass actor public key and signature
     *
     * Log an authentication action (e.g. login, signup, logout, auto-login).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logAuthActionTest() throws ApiException {
        String applicationId = null;
        String actorId = null;
        String authAction = null;
        String signature = null;
        String signedLoginChallenge = null;
        String userPublicKey = null;
        String actorDepartment = null;
        String actorDisplayName = null;
        List<String> actorRoles = null;
        Boolean binaryContent = null;
        byte[] details = null;
        List<String> directExternalPush = null;
        List<String> encryptedKeywords = null;
        String gdprCorrelationKey = null;
        String process = null;
        LogResponse response = api.logAuthAction(applicationId, actorId, authAction, signature, signedLoginChallenge, userPublicKey, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, process);

        // TODO: test validations
    }
    
    /**
     * Log multiple events at the same time. This should rarely be used, but allows background processes to push multiple events at the same time
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logBatchTest() throws ApiException {
        String applicationId = null;
        List<BatchLogRequestEntry> requestData = null;
        LogResponse response = api.logBatch(applicationId, requestData);

        // TODO: test validations
    }
    
    /**
     * Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
     *
     * Log a document action. If working with documents, use this to store all events relating to a particular document - creation, modification, deletion, retrieval. You can store the hash of the document in the request body to ensure its integrity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logDocumentTest() throws ApiException {
        String applicationId = null;
        String action = null;
        String actorId = null;
        byte[] details = null;
        String documentId = null;
        String signature = null;
        String actorDepartment = null;
        String actorDisplayName = null;
        List<String> actorRoles = null;
        Boolean binaryContent = null;
        List<String> directExternalPush = null;
        String documentName = null;
        String documentType = null;
        List<String> encryptedKeywords = null;
        String gdprCorrelationKey = null;
        String process = null;
        LogResponse response = api.logDocument(applicationId, action, actorId, details, documentId, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, directExternalPush, documentName, documentType, encryptedKeywords, gdprCorrelationKey, process);

        // TODO: test validations
    }
    
    /**
     * Log an event by providing full details. Action can be INSERT/UPDATE/DELETE/GET or any custom action
     *
     * Log an even by specifying all relevant details - actor, action and the entity about which the action is, as well as the request body. There are no limitations to the structure of the request body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logFullTest() throws ApiException {
        String applicationId = null;
        String action = null;
        String actorId = null;
        String entityId = null;
        String entityType = null;
        String auditLogEntryType = null;
        String signature = null;
        String actorDepartment = null;
        String actorDisplayName = null;
        List<String> actorRoles = null;
        Boolean binaryContent = null;
        byte[] details = null;
        List<String> directExternalPush = null;
        List<String> encryptedKeywords = null;
        String gdprCorrelationKey = null;
        String logLevel = null;
        String process = null;
        LogResponse response = api.logFull(applicationId, action, actorId, entityId, entityType, auditLogEntryType, signature, actorDepartment, actorDisplayName, actorRoles, binaryContent, details, directExternalPush, encryptedKeywords, gdprCorrelationKey, logLevel, process);

        // TODO: test validations
    }
    
    /**
     * Log an event by providing just the body without any additional metadata. The body can be fully encrypted or can represent just the hash of the data/document
     *
     * Log an event by just specifying the request body. There are no limitations to the structure of the request body.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logSimpleTest() throws ApiException {
        String applicationId = null;
        String auditLogEntryType = null;
        String signature = null;
        Boolean binaryContent = null;
        byte[] details = null;
        List<String> directExternalPush = null;
        List<String> encryptedKeywords = null;
        String logLevel = null;
        LogResponse response = api.logSimple(applicationId, auditLogEntryType, signature, binaryContent, details, directExternalPush, encryptedKeywords, logLevel);

        // TODO: test validations
    }
    
}
