/*
 * LogSentinel RESTful API
 * Read more at https://docs.logsentinel.com/en/latest/index.html
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.logsentinel.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;

/**
 * InclusionProof
 */

public class InclusionProof {
  @JsonProperty("hash")
  private String hash = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("path")
  private List<String> path = null;

  @JsonProperty("rootHash")
  private String rootHash = null;

  @JsonProperty("treeSize")
  private Integer treeSize = null;

  public InclusionProof hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @ApiModelProperty(value = "")
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }

  public InclusionProof index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Get index
   * @return index
  **/
  @ApiModelProperty(value = "")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public InclusionProof path(List<String> path) {
    this.path = path;
    return this;
  }

  public InclusionProof addPathItem(String pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(value = "")
  public List<String> getPath() {
    return path;
  }

  public void setPath(List<String> path) {
    this.path = path;
  }

  public InclusionProof rootHash(String rootHash) {
    this.rootHash = rootHash;
    return this;
  }

   /**
   * Get rootHash
   * @return rootHash
  **/
  @ApiModelProperty(value = "")
  public String getRootHash() {
    return rootHash;
  }

  public void setRootHash(String rootHash) {
    this.rootHash = rootHash;
  }

  public InclusionProof treeSize(Integer treeSize) {
    this.treeSize = treeSize;
    return this;
  }

   /**
   * Get treeSize
   * @return treeSize
  **/
  @ApiModelProperty(value = "")
  public Integer getTreeSize() {
    return treeSize;
  }

  public void setTreeSize(Integer treeSize) {
    this.treeSize = treeSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InclusionProof inclusionProof = (InclusionProof) o;
    return Objects.equals(this.hash, inclusionProof.hash) &&
        Objects.equals(this.index, inclusionProof.index) &&
        Objects.equals(this.path, inclusionProof.path) &&
        Objects.equals(this.rootHash, inclusionProof.rootHash) &&
        Objects.equals(this.treeSize, inclusionProof.treeSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hash, index, path, rootHash, treeSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InclusionProof {\n");
    
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    rootHash: ").append(toIndentedString(rootHash)).append("\n");
    sb.append("    treeSize: ").append(toIndentedString(treeSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

